#!/usr/bin/env python
# encoding: utf-8
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import absolute_import, print_function, unicode_literals

import os

from efl import ecore
from efl import ecore_x
from efl import elementary
from efl.elementary.layout import Layout
from efl.elementary.list import List
from efl.elementary.entry import Entry
from efl.elementary.window import StandardWindow
from efl.evas import EXPAND_BOTH

from gi.repository import LightDM


# install the _() and ngettext() functions in the main namespace
install_prefix = os.path.dirname(os.path.dirname(__file__))
# locale_dir = os.path.join(install_prefix, 'share', 'locale')
# gettext.install('enter', names='ngettext', localedir=locale_dir)


theme = 'default.edj'
theme_file = os.path.join(install_prefix, 'share', 'lightdm-efl-greeter', 'themes', theme)


class MainWin(StandardWindow):
    def __init__(self, app):
        self.app = app

        # window setup
        StandardWindow.__init__(self, 'lightdm-efl-greeter', 'Enter',
                                autodel=True, size=(400,400))
        self.callback_delete_request_add(lambda o: elementary.exit())

        # make the window fullscreen (without a wm)
        x, y, w, h = self.screen_size
        self.size = (w, h)

        # edje layout (theme)
        self.layout = Layout(self, file=(theme_file, 'enter/main'),
                             size_hint_weight=EXPAND_BOTH)
        self.resize_object_add(self.layout)
        self.layout.show()

        # create all the elm widgets and show the win
        self.create_widgets()
        self.show()

        # give focus to the window (without a wm)
        ecore_x_win = ecore_x.Window_from_xid(self.xwindow_xid)
        ecore_x_win.focus()
        self.username_entry.focus = True

    def create_widgets(self):
        # username entry
        en = Entry(self, scrollable=True, single_line=True)
        en.callback_activated_add(self._username_en_activated_cb)
        en.part_text_set('guide', 'Username')
        self.layout.part_content_set('username.swallow', en)
        self.username_entry = en

        # prompt entry
        en = Entry(self, scrollable=True, single_line=True)
        en.callback_activated_add(self._prompt_en_activated_cb)
        self.layout.part_content_set('prompt.swallow', en)
        self.prompt_entry = en

        # session list
        li = List(self)
        li.callback_selected_add(self._sessions_list_selected_cb)
        self.layout.part_content_set('sessions.swallow', li)
        self.sessions_list = li
        self.select_session(self.app.session)

        # power action list
        li = List(self)
        li.callback_selected_add(self._power_list_selected_cb)
        self.layout.part_content_set('power.swallow', li)
        self.power_list = li
        self.select_power(self.app.power)

    def select_session(self, key):
        """ Select the given session in the session list and the label """
        self.sessions_list.clear()
        for s in LightDM.get_sessions():
            it = self.sessions_list.item_append(s.props.name)
            it.data['key'] = s.props.key
            if s.props.key == key:
                it.selected = True

    def _sessions_list_selected_cb(self, li, item):
        self.app.session = item.data['key']
        self.layout.signal_emit('sessions,hide', '')
        self.layout.part_text_set('session.text', item.text)

    def select_power(self, key):
        """ Select the given power action in the power list and the label """
        self.power_list.clear()
        if LightDM.get_can_hibernate():
            it = self.power_list.item_append('hibernate')
            it.data['key'] = 'hibernate'
            if it.data['key'] == key:
                it.selected = True
        if LightDM.get_can_restart():
            it = self.power_list.item_append('restart')
            it.data['key'] = 'restart'
            if it.data['key'] == key:
                it.selected = True
        if LightDM.get_can_shutdown():
            it = self.power_list.item_append('shutdown')
            it.data['key'] = 'shutdown'
            if it.data['key'] == key:
                it.selected = True
        if LightDM.get_can_suspend():
            it = self.power_list.item_append('suspend')
            it.data['key'] = 'suspend'
            if it.data['key'] == key:
                it.selected = True

    def _power_list_selected_cb(self, li, item):
        self.app.power = item.data['key']
        self.layout.signal_emit('power,hide', '')
        if self.app.power == 'hibernate':
            #self.system_hibernate()
            self.layout.part_text_set('message.text', self.app.power)
        if self.app.power == 'restart':
            #self.system_restart()
            self.layout.part_text_set('message.text', self.app.power)
        if self.app.power == 'shutdown':
            #self.system_shutdown()
            self.layout.part_text_set('message.text', self.app.power)
        if self.app.power == 'suspend':
            #self.system_suspend()
            self.layout.part_text_set('message.text', self.app.power)
        
    def _username_en_activated_cb(self, en):
        self.app.user_selected(en.text)

    def _prompt_en_activated_cb(self, en):
        self.app.prompt_response(en.text)

    def prompt_show(self, text='', password=False):
        self.layout.signal_emit('prompt,show', '')
        self.prompt_entry.password = password
        self.prompt_entry.part_text_set('guide', text)
        self.prompt_entry.focus = True

    def prompt_hide(self):
        self.layout.signal_emit('prompt,hide', '')
        self.username_entry.focus = True

    def message_show(self, msg):
        self.layout.part_text_set('message.text', msg)

    def log(self, msg):
        self.layout.part_text_set('debug.text', str(msg))


class EnterApplication(object):
    def __init__(self):
        # LightDM greeter
        self.greeter = LightDM.Greeter()
        self.greeter.connect('authentication-complete',
                             self.greeter_authentication_complete_cb)
        self.greeter.connect('show-message', self.greeter_show_message_cb)
        self.greeter.connect('show-prompt', self.greeter_show_prompt_cb)
        self.greeter.connect_sync()

        # get info from the greeter
        self.session = self.greeter.get_default_session_hint() or "enlightenment"
        
        # ... power info
        self.power = list()

        # main window
        self.main_win = MainWin(self)
        self.log('debug label') # TODO removeme
        self.main_win.message_show('message label') # TODO removeme

    def log(self, msg):
        self.main_win.log(msg)

    def user_selected(self, username):
        # get user default session
        user_list = LightDM.UserList()
        user_session = user_list.get_user_by_name(username).get_session()
        if user_session:
            self.main_win.select_session(user_session)

        # start user auth process
        self.greeter.authenticate(username)

    def prompt_response(self, response):
        self.main_win.prompt_hide()
        self.main_win.message_show('Login in progress...')
        self.greeter.respond(response)

    def greeter_show_prompt_cb(self, greeter, text, promptType):
        """ called by LDM when need a prompt """
        if promptType == LightDM.PromptType.SECRET:
            self.main_win.prompt_show(text, password=True)
        else:
            self.main_win.prompt_show(text, password=False)

    def greeter_show_message_cb(self, text, message_type):
        """ called by LDM when we must show a message """
        self.main_win.message_show(text)

    def greeter_authentication_complete_cb(self, greeter):
        """ called by LDM when auth is completed """
        if self.greeter.get_is_authenticated():
            if not self.greeter.start_session_sync(self.session):
                self.main_win.message_show('Failed to start session')
        else:
            self.main_win.message_show('Login failed')


if __name__ == '__main__':
    elementary.init()
    app = EnterApplication()
    ecore.main_loop_glib_integrate()
    elementary.run()
    elementary.shutdown()
