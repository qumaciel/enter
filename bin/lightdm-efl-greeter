#!/usr/bin/env python
# encoding: utf-8
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

from __future__ import absolute_import, print_function, unicode_literals

import os
import sys

from efl import ecore
from efl import ecore_x
from efl import elementary
from efl.elementary.layout import Layout
from efl.elementary.list import List
from efl.elementary.entry import Entry
from efl.elementary.menu import Menu
from efl.elementary.window import StandardWindow
from efl.evas import EXPAND_BOTH

from gi.repository import LightDM


# install the _() and ngettext() functions in the main namespace
install_prefix = os.path.dirname(os.path.dirname(__file__))
# locale_dir = os.path.join(install_prefix, 'share', 'locale')
# gettext.install('enter', names='ngettext', localedir=locale_dir)


theme = 'default.edj'
theme_file = os.path.join(install_prefix, 'share', 'lightdm-efl-greeter', 'themes', theme)


class MainWin(StandardWindow):
    def __init__(self, app):
        self.app = app

        # window setup
        StandardWindow.__init__(self, 'lightdm-efl-greeter', 'Enter',
                                autodel=True, size=(600,400),
                                cursor='arrow')
        self.callback_delete_request_add(lambda o: elementary.exit())

        # make the window fullscreen (without a wm)
        x, y, w, h = self.screen_size
        self.size = (w, h)

        # edje layout (theme)
        self.layout = Layout(self, file=(theme_file, 'enter/main'),
                             size_hint_weight=EXPAND_BOTH)
        self.layout.signal_callback_add('sessions,show', '',
                                        self._sig_sessions_show)
        self.layout.signal_callback_add('powers,show', '',
                                        self._sig_powers_show)
        self.resize_object_add(self.layout)
        self.layout.show()

        # create all the elm widgets and show the win
        self.create_widgets()
        self.show()

        # give focus to the window (without a wm)
        ecore_x_win = ecore_x.Window_from_xid(self.xwindow_xid)
        ecore_x_win.focus()
        ecore_x_win.cursor_show()
        self.username_entry.focus = True

    def create_widgets(self):
        # username entry
        en = Entry(self, scrollable=True, single_line=True)
        en.callback_activated_add(self._username_en_activated_cb)
        en.part_text_set('guide', 'Username')
        self.layout.part_content_set('username.swallow', en)
        self.username_entry = en

        # prompt entry
        en = Entry(self, scrollable=True, single_line=True)
        en.callback_activated_add(self._prompt_en_activated_cb)
        self.layout.part_content_set('prompt.swallow', en)
        self.prompt_entry = en

    # hostname
    def hostname_set(self, hostname):
        self.layout.part_text_set('hostname.text', hostname)

    # sessions
    def _sig_sessions_show(self, ly, signal, source):
        """ Signal from the theme to show the sessions menu """
        m = Menu(self)
        for key, session in app.sessions.items():
            m.item_add(None, session.props.name, None,
                       self._session_clicked_cb, session)

        x, y = self.evas.pointer_canvas_xy_get()
        m.move(x, y)
        m.show()

    def _session_clicked_cb(self, menu, item, session):
        self.app.selected_session = session.props.key
        self.select_session(session)

    def select_session(self, session):
        """ Mark the given Session as selected """
        self.layout.part_text_set('session.text', session.props.name)

    # powers
    def _sig_powers_show(self, ly, signal, source):
        """ Signal from the theme to show the powers menu """
        m = Menu(self)
        it = m.item_add(None, 'Shutdown', None, lambda m,i: LightDM.shutdown())
        it.disabled = not LightDM.get_can_shutdown()
        it = m.item_add(None, 'Restart', None, lambda m,i: LightDM.restart())
        it.disabled = not LightDM.get_can_restart()
        it = m.item_add(None, 'Suspend', None, lambda m,i: LightDM.suspend())
        it.disabled = not LightDM.get_can_suspend()
        it = m.item_add(None, 'Hibernate', None, lambda m,i: LightDM.hibernate())
        it.disabled = not LightDM.get_can_hibernate()

        x, y = self.evas.pointer_canvas_xy_get()
        m.move(x, y)
        m.show()

    # username entry
    def _username_en_activated_cb(self, en):
        self.app.user_selected(en.text)

    def _prompt_en_activated_cb(self, en):
        self.app.prompt_response(en.text)

    # password/prompt entry
    def prompt_show(self, text='', password=False):
        self.layout.signal_emit('prompt,show', '')
        self.prompt_entry.password = password
        self.prompt_entry.part_text_set('guide', text)
        self.prompt_entry.focus = True

    def prompt_hide(self):
        self.layout.signal_emit('prompt,hide', '')
        self.username_entry.focus = True

    def message_show(self, msg):
        self.layout.part_text_set('message.text', msg)

    def log(self, msg):
        self.layout.part_text_set('debug.text', str(msg))


class EnterApplication(object):
    def __init__(self):
        # LightDM greeter
        self.greeter = LightDM.Greeter()
        self.greeter.connect('authentication-complete',
                             self.greeter_authentication_complete_cb)
        self.greeter.connect('show-message', self.greeter_show_message_cb)
        self.greeter.connect('show-prompt', self.greeter_show_prompt_cb)
        self.greeter.connect_sync()

        # get sessions from the greeter
        self.sessions = dict() # key: session_key  data: Session instance
        for session in LightDM.get_sessions():
            self.sessions[session.props.key] = session
        self.selected_session = None

        # main window
        self.main_win = MainWin(self)
        self.log('debug label') # TODO removeme
        self.main_win.message_show('message label') # TODO removeme

        # set hostname in the gui
        self.main_win.hostname_set(LightDM.get_hostname())

    def log(self, msg):
        self.main_win.log(msg)

    def user_selected(self, username):
        # select the session for the user
        users_list = LightDM.UserList()
        user = users_list.get_user_by_name(username)
        if user:
            user_session = user.get_session()
        else:
            user_session = self.greeter.get_default_session_hint()
        self.main_win.select_session(self.sessions[user_session])

        # start user auth process
        self.greeter.authenticate(username)

    def prompt_response(self, response):
        self.main_win.prompt_hide()
        self.main_win.message_show('Login in progress...')
        self.greeter.respond(response)

    def greeter_show_prompt_cb(self, greeter, text, promptType):
        """ called by LDM when need a prompt """
        if promptType == LightDM.PromptType.SECRET:
            self.main_win.prompt_show(text, password=True)
        else:
            self.main_win.prompt_show(text, password=False)

    def greeter_show_message_cb(self, text, message_type):
        """ called by LDM when we must show a message """
        self.main_win.message_show(text)

    def greeter_authentication_complete_cb(self, greeter):
        """ called by LDM when auth is completed """
        if self.greeter.get_is_authenticated():
            if not self.greeter.start_session_sync(self.selected_session):
                self.main_win.message_show('Failed to start session')
        else:
            self.main_win.message_show('Login failed')


if __name__ == '__main__':
    elementary.init()
    app = EnterApplication()
    ecore.main_loop_glib_integrate()
    elementary.run()
    elementary.shutdown()
